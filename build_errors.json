{
    "CompileTimeErrors": [
        {
            "error_name": "Cannot find symbol",
            "description": "Occurs when a variable, method, or class is not defined or not accessible in the scope.",
            "implementation_guide": "Use a variable, method, or class that hasn't been defined or imported"
        },
        {
            "error_name": "Incompatible types",
            "description": "Happens when assigning a value of one type to a variable of another incompatible type.",
            "implementation_guide": "Assign a value to a variable of an incompatible type (e.g., String to int)"
        },
        {
            "error_name": "Missing return statement",
            "description": "Occurs when a method that is supposed to return a value does not have a return statement.",
            "implementation_guide": "Create a non-void method without a return statement or with missing returns in some code paths"
        },
        {
            "error_name": "Illegal start of expression",
            "description": "Caused by syntax errors such as misplaced keywords or missing punctuation.",
            "implementation_guide": "Place a keyword in the wrong position or leave out necessary punctuation"
        },
        {
            "error_name": "Class not found",
            "description": "Occurs when a referenced class is not found in the specified package or classpath.",
            "implementation_guide": "Import a non-existent class or use a class name that doesn't exist"
        },
        {
            "error_name": "Package does not exist",
            "description": "Thrown when attempting to import a package that does not exist or is misspelled.",
            "implementation_guide": "Import a non-existent or misspelled package"
        },
        {
            "error_name": "Unreachable statement",
            "description": "Occurs when code cannot be reached due to a return, break, or continue statement earlier in the flow.",
            "implementation_guide": "Add code after a return, break, or continue statement"
        },
        {
            "error_name": "Variable might not have been initialized",
            "description": "Occurs when a local variable is used before it has been initialized.",
            "implementation_guide": "Use a local variable without initializing it first"
        },
        {
            "error_name": "Method does not override method from its superclass",
            "description": "Happens when using the @Override annotation, but the method doesn't actually override a superclass method.",
            "implementation_guide": "Use @Override annotation on a method that doesn't actually override a superclass method"
        },
        {
            "error_name": "Cyclic inheritance",
            "description": "Occurs when a class hierarchy forms a cycle through inheritance or interface implementation.",
            "implementation_guide": "Create a class hierarchy where class A extends class B and class B extends class A"
        },
        {
            "error_name": "Duplicate class",
            "description": "Happens when two classes with the same name exist in the same package.",
            "implementation_guide": "Define two classes with the same name in the same package/file"
        },
        {
            "error_name": "Unchecked or unsafe operations",
            "description": "Occurs when using raw types instead of parameterized types in generic code.",
            "implementation_guide": "Use raw types instead of parameterized types with generics"
        },
        {
            "error_name": "Type mismatch: cannot convert",
            "description": "Happens when there's an incompatible type conversion in an expression or assignment.",
            "implementation_guide": "Try to convert between incompatible types without proper casting"
        },
        {
            "error_name": "Unreported exception",
            "description": "Occurs when a checked exception is thrown but not caught or declared in the method signature.",
            "implementation_guide": "Throw a checked exception without catching it or declaring it in the method signature with 'throws'"
        }
    ],
    "RuntimeErrors": [
        {
            "error_name": "NullPointerException",
            "description": "Thrown when trying to access a method or field on a null object reference.",
            "implementation_guide": "Create a scenario where a null object is accessed without proper null checking"
        },
        {
            "error_name": "ArrayIndexOutOfBoundsException",
            "description": "Happens when attempting to access an array index that is out of its valid range.",
            "implementation_guide": "Access an array index that is negative or beyond the array's length"
        },
        {
            "error_name": "ArithmeticException",
            "description": "Occurs when performing an invalid arithmetic operation, such as division by zero.",
            "implementation_guide": "Create a division by zero scenario"
        },
        {
            "error_name": "ClassCastException",
            "description": "Thrown when an object is cast to an incompatible type.",
            "implementation_guide": "Cast an object to an incompatible type without checking"
        },
        {
            "error_name": "IllegalArgumentException",
            "description": "Occurs when an illegal argument is passed to a method.",
            "implementation_guide": "Pass an invalid or out-of-range parameter to a method"
        },
        {
            "error_name": "StackOverflowError",
            "description": "Occurs when a recursive method calls itself indefinitely, exhausting stack memory.",
            "implementation_guide": "Create a method that calls itself recursively without a proper base case"
        },
        {
            "error_name": "OutOfMemoryError",
            "description": "Thrown when the Java Virtual Machine runs out of memory.",
            "implementation_guide": "Create a memory leak or attempt to allocate an extremely large amount of memory"
        },
        {
            "error_name": "StringIndexOutOfBoundsException",
            "description": "Thrown when attempting to access a character at an invalid index in a string.",
            "implementation_guide": "Try to access a character at an invalid position in a string"
        },
        {
            "error_name": "NumberFormatException",
            "description": "Occurs when attempting to convert a string to a numeric type but the string doesn't have a valid format.",
            "implementation_guide": "Try to parse a non-numeric string into a number"
        },
        {
            "error_name": "ConcurrentModificationException",
            "description": "Thrown when a collection is modified while being iterated over using an iterator.",
            "implementation_guide": "Modify a collection while iterating through it with a for-each loop"
        },
        {
            "error_name": "FileNotFoundException",
            "description": "Occurs when attempting to access a file that does not exist or cannot be found.",
            "implementation_guide": "Try to open a file that doesn't exist"
        },
        {
            "error_name": "NoSuchElementException",
            "description": "Thrown when trying to access an element that doesn't exist in a collection.",
            "implementation_guide": "Try to access a non-existent element in a collection"
        },
        {
            "error_name": "IllegalStateException",
            "description": "Thrown when a method is invoked at an inappropriate time or when an object is in an inappropriate state.",
            "implementation_guide": "Call a method when an object is in an inappropriate state for that operation"
        },
        {
            "error_name": "UnsupportedOperationException",
            "description": "Thrown when an unsupported operation is attempted, commonly in read-only collections.",
            "implementation_guide": "Try to modify an unmodifiable collection"
        },
        {
            "error_name": "IndexOutOfBoundsException",
            "description": "Thrown when an index of some sort (such as to a list or string) is out of range.",
            "implementation_guide": "Access a List with an index outside its valid range"
        }
    ],
    "LogicalErrors": [
        {
            "error_name": "Incorrect loop condition",
            "description": "Occurs when a loop condition is incorrect, leading to infinite loops or premature exits.",
            "implementation_guide": "Create a loop with a condition that never changes or leads to unintended behavior"
        },
        {
            "error_name": "Off-by-one error",
            "description": "Happens when a loop iterates one time too many or one time too few.",
            "implementation_guide": "Use '<' instead of '<=' or vice versa in a loop boundary condition"
        },
        {
            "error_name": "Using assignment instead of comparison",
            "description": "Occurs when `=` is used instead of `==` in a condition.",
            "implementation_guide": "Use the assignment operator '=' instead of the equality operator '==' in an if condition"
        },
        {
            "error_name": "Incorrect operator precedence",
            "description": "Happens when operations are performed in an unintended order due to precedence rules.",
            "implementation_guide": "Write an expression where operator precedence creates unintended results"
        },
        {
            "error_name": "Logic flaw in conditional statements",
            "description": "Causes unexpected behavior due to incorrect logical conditions.",
            "implementation_guide": "Create a conditional statement with incorrect logical operators (e.g., using && when || is needed)"
        },
        {
            "error_name": "String comparison using == instead of equals()",
            "description": "Using == to compare strings checks for reference equality instead of content equality.",
            "implementation_guide": "Compare two strings using '==' instead of the equals() method"
        },
        {
            "error_name": "Unintended integer division",
            "description": "Occurs when dividing two integers and expecting a floating-point result.",
            "implementation_guide": "Divide two integers where decimal precision is needed but lost"
        },
        {
            "error_name": "Floating-point precision issues",
            "description": "Occurs when comparing floating-point numbers directly for equality without accounting for precision errors.",
            "implementation_guide": "Compare floating-point numbers using '==' without accounting for precision issues"
        },
        {
            "error_name": "Ignoring method return values",
            "description": "Not checking or using the return value of a method, especially for methods that return status or transformed values.",
            "implementation_guide": "Call a method that returns an important value but ignore the return value"
        },
        {
            "error_name": "Resource leaks",
            "description": "Not properly closing resources like files, database connections, or network sockets.",
            "implementation_guide": "Open a resource like a file or stream without closing it properly"
        },
        {
            "error_name": "Race conditions",
            "description": "Occurs in multi-threaded applications when the timing or sequence of operations affects the correctness of a program.",
            "implementation_guide": "Create a shared resource accessed by multiple threads without proper synchronization"
        },
        {
            "error_name": "Deadlock",
            "description": "Happens when two or more threads are blocked forever, waiting for each other to release resources.",
            "implementation_guide": "Create two threads that each hold a resource the other needs"
        },
        {
            "error_name": "Boundary value errors",
            "description": "Not properly handling edge cases like empty collections, minimum/maximum values, or other boundary conditions.",
            "implementation_guide": "Fail to handle edge cases like empty collections or extreme values"
        }
    ],
    "WarningsAndHints": [
        {
            "error_name": "Unused variable",
            "description": "A variable is declared but never used in the code.",
            "implementation_guide": "Declare a variable but never use it"
        },
        {
            "error_name": "Redundant cast",
            "description": "A cast operation that is unnecessary because the type is already compatible.",
            "implementation_guide": "Cast an object to a type it already is"
        },
        {
            "error_name": "Deprecated API usage",
            "description": "Using methods or classes that are marked as deprecated in the Java API.",
            "implementation_guide": "Use a method or class marked as @Deprecated"
        },
        {
            "error_name": "Unchecked conversion",
            "description": "Converting a raw type to a parameterized type without type checking.",
            "implementation_guide": "Convert a raw type to a parameterized type without proper type checking"
        },
        {
            "error_name": "Serial version UID warning",
            "description": "Missing serialVersionUID field in a Serializable class, which may cause compatibility issues.",
            "implementation_guide": "Create a Serializable class without defining a serialVersionUID field"
        },
        {
            "error_name": "Platform-dependent encoding",
            "description": "Using the default character encoding which may vary across different platforms.",
            "implementation_guide": "Use methods that rely on the default character encoding instead of specifying one"
        }
    ]
}